---
--- Generated by Luanalysis
--- Created by fueling
--- DateTime: 12.07.22 02:07
--- https://github.com/fuelingtheweb/fuelingzsh/blob/200de21c40ea9a2a09731a6cffa00775c577dc67/dotfiles/.hammerspoon/Helpers/Table.lua


local Table = {}
Table.__index = Table

function Table.has(table, needle)
    for k, v in ipairs(table) do
        if v == needle then
            return true
        end
    end

    return false
end

function Table.count(table)
    if not table then return 0 end

    local count = 0

    Table.each(table, function()
        count = count + 1
    end)

    return count
end

function Table.each(table, callback)
    for key, value in pairs(table) do
        callback(value, key)
    end
end

function Table.assign(t1, t2)
    if t2 == nil then return t1 end
    for key, value in pairs(t2) do
        t1[key] = value
    end

    return t1
end

function Table.assigned(t1, t2)
    local new = { }
    for key, value in pairs(t1) do
        new[key] = value
    end
    if t2 == nil then return new end
    for key, value in pairs(t2) do
        new[key] = value
    end
    return new
end


-- source: https://github.com/Kampfkarren/Roblox/blob/master/DataStore2/TableUtil.lua
function Table.clone(tbl)
    local clone = {}

    for key, value in pairs(tbl) do
        if type(value) == "table" then
            clone[key] = Table.clone(value)
        else
            clone[key] = value
        end
    end

    return clone
end


-- TODO: more table helpers:
--       https://github.com/Kampfkarren/Roblox/blob/master/Boilerplate/table.module.lua#L110

function Table.keys(tbl)
    local ret = {}

    for key,_ in pairs(tbl) do
        table.insert(ret, key)
    end

    return ret
end

function Table.values(tbl)
    local ret = {}

    for _,val in pairs(tbl) do
        table.insert(ret, val)
    end

    return ret
end

function Table.sortByKeyIterator(tbl, sort)
    local keys = Table.keys(tbl)

    table.sort(keys, sort)

    return function()
        if #keys == 0 then
            return nil
        end

        local nextValue = table.remove(keys, 1)

        return nextValue, tbl[nextValue]
    end
end

--sort by values
function Table.sortByValueIterator(tbl, sort)
    sort = sort or function(x, y)
        return x < y
    end

    return Table.sortByKeyIterator(tbl, function(x, y)
        return sort(tbl[x], tbl[y])
    end)
end


function Table.sortByKey(tbl, sort)
    local keys = Table.keys(tbl)

    table.sort(keys, sort)

    local sortedTable = {}

    for _, key in ipairs(keys) do
        sortedTable[key] = tbl[key]
    end

    return sortedTable
end

--sort by values
function Table.sortByValue(tbl, sort)
    sort = sort or function(x, y)
        return x > y
    end

    return Table.sortByKey(tbl, function(x, y)
        return sort(tbl[x], tbl[y])
    end)
end

return Table