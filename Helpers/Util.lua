---
--- Generated by Luanalysis
--- Created by muescha.
--- DateTime: 07.04.23 11:26
--- https://github.com/mtarbit/dotfiles/blob/master/source/.hammerspoon/util.lua


--- more helper files here: https://github.com/peterhajas/dotfiles/blob/master/hammerspoon/.hammerspoon/util.lua

function readFile(path)
    local f = io.open(path, 'r')
    if f==nil then
        error("\nERROR: missing File: "..path)
    end
    local s = f:read('a')
    f:close()
    return s
end

-- TODO: Remove because better implementation is in hs.fnutils.partial
function partial(fn, arg)
    return function(...)
        return fn(arg, ...)
    end
end

-- usage:
-- template([[
--   var name = "{{ action }}";
-- ]], {
--        value=(value and 1 or 0),
--        something=value,
--        javascript=readFile('assets/breaks/main.js')
-- })

function template(s, t)
    local pattern = '{{%s*([^}]-)%s*}}'
    -- allow usage of backticks ` in javascript files
    -- and do not replace ${} placeholder in first place.
    local replace = function(k)
        return tostring(t[k])
                :gsub("`", "\\`")
                :gsub("%$", "\\$")
    end
    --local replace = function(k) return tostring(t[k]) end
    local result, _ = s:gsub(pattern, replace)
    return result
end

function readFileTemplate(path, t)
    -- double template if inside the replaced
    -- code is the memory used
    return template(template(readFile(path), t),t)
end

function runJavaScriptInBrowser(code, browser, wrapper)
    return runJavaScript(
            readFileTemplate(wrapper, {
                code = code,
                application = browser,
            }
        )
    )
end

function runJavaScript(code)
    debugInfo("JS: ", code)
    return hs.osascript.javascript(code)
end

function runAppleScript(code)
    debugInfo("AS: ", code)
    return hs.osascript.applescript(code)
end

-- Define a function that checks if a method exists on a userdata object
function doesMethodExist(obj, methodName)
    --return type(obj) == "userdata" and type(rawget(getmetatable(obj), methodName)) == "function"
    return type(rawget(getmetatable(obj), methodName)) == "function"
end

--- isHammerspoonExtension(obj. name) -> bool
--- Function
--- check if an object is an Hammerspoon extension object
---
--- Parameters:
---  * obj - an hammerspoon object
---  * name - A string containing the name of a module (e.g. `"hs.screen"`)
---
--- Returns:
---  * if the object is an extension object
function isHammerspoonExtension(obj, name)
    return getmetatable(obj) == hs.getObjectMetatable(name)
end