---
--- Generated by Luanalysis
--- Created by muescha.
--- DateTime: 26.07.22 16:45
---

-- Helper Functions

function debugElement(element)
    for i,v in pairs(element:attributeNames()) do
        local o = element:attributeValue(v)
        print(i ..". ".. v .. ": " .. hs.inspect(o))
    end
end

function debugInfo(obj)
    print(hs.inspect(obj))
end

function debugTable(obj)
    print(dumpTableToString(obj))
end

function dumpTableToString(o, level)
    if level == nil then
        level = 1
    end
    local showCounter = false
    local intend = string.rep('  ', level)
    if type(o) == 'table' then
        local info = {}
        for k, v in pairs(o) do
            if type(k) ~= 'number' then
                --k = '  ["'..k..'"] = '
                k = '  ' .. k .. ' = '
            else
                k = '  '
            end
            table.insert(info, intend .. k .. dumpTableToString(v, level + 1))

            --if type(k) ~= 'number' then k = '"'..k..'"' end
            --table.insert(info, intend.. '  ['..k..'] = ' .. dumpTableToString(v, level+1))
        end

        local s
        if #info > 0 then
            local counter = (showCounter and ('<' .. #info .. '>') or '')
            s = counter .. '{\n' .. table.concat(info, ',\n') .. '\n' .. intend .. '}'
        else
            s = '{}'
        end

        return s
    else
        --return tostring(o)
        return hs.inspect(o)
    end
end



function debugTraceback ()
    local level = 1
    while true do
        local info = debug.getinfo(level, "Sl")
        if not info then break end
        if info.what == "C" then   -- is a C function?
            print(level, "C function")
        else   -- a Lua function
            print(string.format("[%s]:%d",
                    info.short_src, info.currentline))
        end
        level = level + 1
    end
end




function ReadLine(src, line)
    return ReadSource(src:match("@?(.*)"), line)
    -- debugInfo(src)
    -- debugInfo(src:match("@?(.*)"))
    --if line == nil then return "?" end
    --local f = io.open(src:match("@?(.*)"))
    --local i = 1 -- line counter
    --for l in f:lines() do -- lines iterator, "l" returns the line
    --    if i == line then return l end -- we found this line, return it
    --    i = i + 1 -- counting lines
    --end
    --return "" -- Doesn't have that line
end

function debugTracePrint (event, line)
    local info = debug.getinfo(2)
    local s = info.short_src
    if info.source:startswith("@/Application") then return end

    local source = ReadLine(info.source, line)
    --local source = "x"

    print(s .. ":" .. line .. " " .. table.concat(source))
end

function debugTrace()
    debug.sethook(debugTracePrint, "l")
end


-- debugTrace()